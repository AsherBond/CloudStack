var g_mySession = null;var g_sessionKey = null;var g_role = null; // roles - root, domain-admin, ro-admin, uservar g_username = null;var g_account = null;var g_domainid = null;var g_enableLogging = false; var g_timezoneoffset = null;var g_timezone = null;var g_supportELB = null;var g_firewallRuleUiEnabled = null; //true or false// capabilitiesvar g_directAttachSecurityGroupsEnabled = "false";function getDirectAttachSecurityGroupsEnabled() { return g_directAttachSecurityGroupsEnabled; }var g_userPublicTemplateEnabled = "true";function getUserPublicTemplateEnabled() { return g_userPublicTemplateEnabled; }//keyboard keycodevar keycode_Enter = 13;//XMLHttpResponse.statusvar ERROR_ACCESS_DENIED_DUE_TO_UNAUTHORIZED = 401;var ERROR_INTERNET_NAME_NOT_RESOLVED = 12007;var ERROR_INTERNET_CANNOT_CONNECT = 12029;var ERROR_VMOPS_ACCOUNT_ERROR = 531;// Default password is MD5 hashed.  Set the following variable to false to disable this.var md5Hashed = true;//loginfunction login() {	var array1 = [];		//var username = $("#account_username").val();	var username = "admin"; //for testing	array1.push("&username="+encodeURIComponent(username));		//var password = $("#account_password").val();	var password = "password"; //for testing	if (md5Hashed) {		password = $.md5(password);	} 	array1.push("&password="+password);		//var domain = $("#account_domain").val();	var domain = ""; //for testing	if(domain != null && domain.length > 0) {		if (domain.charAt(0) != "/") {			domain = "/" + domain;		}	    array1.push("&domain="+encodeURIComponent(domain));	} else {		array1.push("&domain="+encodeURIComponent("/"));	}			$.ajax({		//type: "POST",		url: createURL("login") + array1.join(""),	    		dataType: "json",		async: false,		success: function(json) {		    			g_mySession = $.cookie('JSESSIONID');			g_sessionKey = encodeURIComponent(json.loginresponse.sessionkey);			g_role = json.loginresponse.type;			g_username = json.loginresponse.username;				g_account = json.loginresponse.account;			g_domainid = json.loginresponse.domainid;				g_timezone = json.loginresponse.timezone;											g_timezoneoffset = json.loginresponse.timezoneoffset;												$.cookie('sessionKey', g_sessionKey, { expires: 1});			$.cookie('username', g_username, { expires: 1});				$.cookie('account', g_account, { expires: 1});				$.cookie('domainid', g_domainid, { expires: 1});							$.cookie('role', g_role, { expires: 1});			$.cookie('timezoneoffset', g_timezoneoffset, { expires: 1});  			$.cookie('timezone', g_timezone, { expires: 1});  								           						$.ajax({			    url: createURL("listCapabilities"),				//url: "command=/client/api?listCapabilities&sessionkey="+g_sessionKey,				dataType: "json",				async: false,				success: function(json) {					   				    /* g_supportELB: "guest"   — ips are allocated on guest network (so use 'forvirtualnetwork' = false)				     * g_supportELB: "public"  - ips are allocated on public network (so use 'forvirtualnetwork' = true)				     * g_supportELB: "false"   – no ELB support				     */				    g_supportELB = json.listcapabilitiesresponse.capability.supportELB.toString(); //convert boolean to string if it's boolean				    				    $.cookie('supportELB', g_supportELB, { expires: 1}); 				    					    				    g_firewallRuleUiEnabled = json.listcapabilitiesresponse.capability.firewallRuleUiEnabled.toString(); //convert boolean to string if it's boolean						    				    $.cookie('firewallRuleUiEnabled', g_firewallRuleUiEnabled, { expires: 1}); 				    			    					if (json.listcapabilitiesresponse.capability.userpublictemplateenabled != null) {						g_userPublicTemplateEnabled = json.listcapabilitiesresponse.capability.userpublictemplateenabled.toString(); //convert boolean to string if it's boolean						$.cookie('userpublictemplateenabled', g_userPublicTemplateEnabled, { expires: 1});					}										if (json.listcapabilitiesresponse.capability.securitygroupsenabled != null) {						g_directAttachSecurityGroupsEnabled = json.listcapabilitiesresponse.capability.securitygroupsenabled.toString(); //convert boolean to string if it's boolean						$.cookie('directattachsecuritygroupsenabled', g_directAttachSecurityGroupsEnabled, { expires: 1});					}							},				error: function(xmlHTTP) {					//logout(false);				},				beforeSend: function(xmlHTTP) {					return true;				}			});		},		error: function() {			//$("#account_password").val("");			//$("#login_wrapper #login_error").show();			//$("#account_username").focus();		},		beforeSend: function(XMLHttpRequest) {			return true;		}	});}//API callsfunction createURL(apiName) {    return "/client/api?" + "command=" + apiName +"&response=json&sessionkey=" + g_sessionKey;}function fromdb(val) {    return sanitizeXSS(noNull(val));}function todb(val) {    return encodeURIComponent(val);}function noNull(val) {    if(val == null)        return "";    else        return val;}function sanitizeXSS(val) {  // Prevent cross-site-script(XSS) attack       if(val == null || typeof(val) != "string")        return val;     val = val.replace(/</g, "&lt;");  //replace < whose unicode is \u003c         val = val.replace(/>/g, "&gt;");  //replace > whose unicode is \u003e      return unescape(val);}// Role Functionsfunction isAdmin() {	return (g_role == 1);}function isDomainAdmin() {	return (g_role == 2);}function isUser() {	return (g_role == 0);}// FUNCTION: Handles AJAX error callbacks.  You can pass in an optional function to // handle errors that are not already handled by this method.  function handleError(XMLHttpResponse, handleErrorCallback) {	// User Not authenticated	if (XMLHttpResponse.status == ERROR_ACCESS_DENIED_DUE_TO_UNAUTHORIZED) {		$("#dialog_session_expired").dialog("open");	} 		else if (XMLHttpResponse.status == ERROR_INTERNET_NAME_NOT_RESOLVED) {		$("#dialog_error_internet_not_resolved").dialog("open");	} 	else if (XMLHttpResponse.status == ERROR_INTERNET_CANNOT_CONNECT) {		$("#dialog_error_management_server_not_accessible").dialog("open");	} 	else if (XMLHttpResponse.status == ERROR_VMOPS_ACCOUNT_ERROR && handleErrorCallback != undefined) {		handleErrorCallback();	} 	else if (handleErrorCallback != undefined) {		handleErrorCallback();	}	else {	  		var errorMsg = parseXMLHttpResponse(XMLHttpResponse);						$("#dialog_error").text(fromdb(errorMsg)).dialog("open");	}}function convertBytes(bytes) {	if (bytes < 1024 * 1024) {		return (bytes / 1024).toFixed(2) + " KB";	} else if (bytes < 1024 * 1024 * 1024) {		return (bytes / 1024 / 1024).toFixed(2) + " MB";	} else if (bytes < 1024 * 1024 * 1024 * 1024) {		return (bytes / 1024 / 1024 / 1024).toFixed(2) + " GB";	} else {		return (bytes / 1024 / 1024 / 1024 / 1024).toFixed(2) + " TB";	}}function convertHz(hz) {    if (hz == null)        return "";	if (hz < 1000) {		return hz + " MHZ";	} else {		return (hz / 1000).toFixed(2) + " GHZ";	} }function toDayOfMonthDesp(dayOfMonth) {    return "Day "+dayOfMonth +" of Month";}function toDayOfWeekDesp(dayOfWeek) {    if (dayOfWeek == "1")        return "Sunday";    else if (dayOfWeek == "2")        return "Monday";    else if (dayOfWeek == "3")        return "Tuesday";    else if (dayOfWeek == "4")        return "Wednesday";    else if (dayOfWeek == "5")        return "Thursday"    else if (dayOfWeek == "6")        return "Friday";    else if (dayOfWeek == "7")        return "Saturday";    }function toBooleanText(booleanValue) {    if(booleanValue == true || booleanValue == "true")        return "Yes";    else if(booleanValue == false ||booleanValue == "false")        return "No";}function toBooleanValue(booleanText) {    if(booleanText == "Yes")        return "true";    else if(booleanText == "No")        return "false";}function toNetworkType(usevirtualnetwork) {    if(usevirtualnetwork == true || usevirtualnetwork == "true")        return "Public";    else        return "Direct";}var roleTypeUser = "0";var roleTypeAdmin = "1";var roleTypeDomainAdmin = "2";function toRole(type) {	if (type == roleTypeUser) {		return "User";	} else if (type == roleTypeAdmin) {		return "Admin";	} else if (type == roleTypeDomainAdmin) {		return "Domain-Admin";	}}function toAlertType(alertCode) {	switch (alertCode) {		case 0 : return "Capacity Threshold - Memory";		case 1 : return "Capacity Threshold - CPU";		case 2 : return "Capacity Threshold - Storage Used";		case 3 : return "Capacity Threshold - Storage Allocated";		case 4 : return "Capacity Threshold - Public IP";		case 5 : return "Capacity Threshold - Private IP";		case 6 : return "Monitoring - Host";		case 7 : return "Monitoring - VM";		case 8 : return "Monitoring - Domain Router";		case 9 : return "Monitoring - Console Proxy";		case 10 : return "Monitoring - Routing Host";		case 11 : return "Monitoring - Storage";		case 12 : return "Monitoring - Usage Server";		case 13 : return "Monitoring - Management Server";		case 14 : return "Migration - Domain Router";		case 15 : return "Migration - Console Proxy";		case 16 : return "Migration - User VM";		case 17 : return "VLAN";		case 18 : return "Monitoring - Secondary Storage VM";	}}//localization//var dictionary = {};   //initialized in each JSP file//var g_dictionary = {}; //initialized in index.jsp//VM Instancefunction getVmName(p_vmName, p_vmDisplayname) {    if(p_vmDisplayname == null)        return fromdb(p_vmName);        var vmName = null;		if (p_vmDisplayname != p_vmName) {		vmName = fromdb(p_vmName) + " (" + fromdb(p_vmDisplayname) + ")";	} else {		vmName = fromdb(p_vmName);	}			return vmName;}// Timezonesvar timezones = new Object();timezones['Etc/GMT+12']='[UTC-12:00] GMT-12:00';timezones['Etc/GMT+11']='[UTC-11:00] GMT-11:00';timezones['Pacific/Samoa']='[UTC-11:00] Samoa Standard Time';timezones['Pacific/Honolulu']='[UTC-10:00] Hawaii Standard Time';timezones['US/Alaska']='[UTC-09:00] Alaska Standard Time';timezones['America/Los_Angeles']='[UTC-08:00] Pacific Standard Time';timezones['Mexico/BajaNorte']='[UTC-08:00] Baja California';timezones['US/Arizona']='[UTC-07:00] Arizona';timezones['US/Mountain']='[UTC-07:00] Mountain Standard Time';timezones['America/Chihuahua']='[UTC-07:00] Chihuahua, La Paz';timezones['America/Chicago']='[UTC-06:00] Central Standard Time';timezones['America/Costa_Rica']='[UTC-06:00] Central America';timezones['America/Mexico_City']='[UTC-06:00] Mexico City, Monterrey';timezones['Canada/Saskatchewan']='[UTC-06:00] Saskatchewan';timezones['America/Bogota']='[UTC-05:00] Bogota, Lima';timezones['America/New_York']='[UTC-05:00] Eastern Standard Time';timezones['America/Caracas']='[UTC-04:00] Venezuela Time';timezones['America/Asuncion']='[UTC-04:00] Paraguay Time';timezones['America/Cuiaba']='[UTC-04:00] Amazon Time';timezones['America/Halifax']='[UTC-04:00] Atlantic Standard Time';timezones['America/La_Paz']='[UTC-04:00] Bolivia Time';timezones['America/Santiago']='[UTC-04:00] Chile Time';timezones['America/St_Johns']='[UTC-03:30] Newfoundland Standard Time';timezones['America/Araguaina']='[UTC-03:00] Brasilia Time';timezones['America/Argentina/Buenos_Aires']='[UTC-03:00] Argentine Time';timezones['America/Cayenne']='[UTC-03:00] French Guiana Time';timezones['America/Godthab']='[UTC-03:00] Greenland Time';timezones['America/Montevideo']='[UTC-03:00] Uruguay Time]';timezones['Etc/GMT+2']='[UTC-02:00] GMT-02:00';timezones['Atlantic/Azores']='[UTC-01:00] Azores Time';timezones['Atlantic/Cape_Verde']='[UTC-01:00] Cape Verde Time';timezones['Africa/Casablanca']='[UTC] Casablanca';timezones['Etc/UTC']='[UTC] Coordinated Universal Time';timezones['Atlantic/Reykjavik']='[UTC] Reykjavik';timezones['Europe/London']='[UTC] Western European Time';timezones['CET']='[UTC+01:00] Central European Time';timezones['Europe/Bucharest']='[UTC+02:00] Eastern European Time';timezones['Africa/Johannesburg']='[UTC+02:00] South Africa Standard Time';timezones['Asia/Beirut']='[UTC+02:00] Beirut';timezones['Africa/Cairo']='[UTC+02:00] Cairo';timezones['Asia/Jerusalem']='[UTC+02:00] Israel Standard Time';timezones['Europe/Minsk']='[UTC+02:00] Minsk';timezones['Europe/Moscow']='[UTC+03:00] Moscow Standard Time';timezones['Africa/Nairobi']='[UTC+03:00] Eastern African Time';timezones['Asia/Karachi']='[UTC+05:00] Pakistan Time';timezones['Asia/Kolkata']='[UTC+05:30] India Standard Time';timezones['Asia/Bangkok']='[UTC+05:30] Indochina Time';timezones['Asia/Shanghai']='[UTC+08:00] China Standard Time';timezones['Asia/Kuala_Lumpur']='[UTC+08:00] Malaysia Time';timezones['Australia/Perth']='[UTC+08:00] Western Standard Time (Australia)';timezones['Asia/Taipei']='[UTC+08:00] Taiwan';timezones['Asia/Tokyo']='[UTC+09:00] Japan Standard Time';timezones['Asia/Seoul']='[UTC+09:00] Korea Standard Time';timezones['Australia/Adelaide']='[UTC+09:30] Central Standard Time (South Australia)';timezones['Australia/Darwin']='[UTC+09:30] Central Standard Time (Northern Territory)';timezones['Australia/Brisbane']='[UTC+10:00] Eastern Standard Time (Queensland)';timezones['Australia/Canberra']='[UTC+10:00] Eastern Standard Time (New South Wales)';timezones['Pacific/Guam']='[UTC+10:00] Chamorro Standard Time';timezones['Pacific/Auckland']='[UTC+12:00] New Zealand Standard Time';/*function setDateField(dateValue, dateField) {    if (dateValue != null && dateValue.length > 0) {	    var disconnected = new Date();	    disconnected.setISO8601(dateValue);		    var showDate;				    if(g_timezoneoffset != null) 	        showDate = disconnected.getTimePlusTimezoneOffset(g_timezoneoffset);	    else 	        showDate = disconnected.getTimePlusTimezoneOffset(0);	    	    dateField.text(showDate);	       }}*/// validate input fields/*function showError(isValid, field, errMsgField, errMsg) {    	if(isValid) {	    errMsgField.text("").hide();	    field.addClass("text").removeClass("error_text");	}	else {	    errMsgField.text(errMsg).show();	    field.removeClass("text").addClass("error_text");		}}function showError2(isValid, field, errMsgField, errMsg, appendErrMsg) {    	if(isValid) {	    errMsgField.text("").hide();	    field.addClass("text2").removeClass("error_text2");	}	else {	    if(appendErrMsg) //append text	        errMsgField.text(errMsgField.text()+errMsg).show();  	    else  //reset text	        errMsgField.text(errMsg).show();  	    field.removeClass("text2").addClass("error_text2");		}}function showErrorInDropdown(isValid, field, errMsgField, errMsg, appendErrMsg) {    	if(isValid) {	    errMsgField.text("").hide();	    field.addClass("select").removeClass("error_select");	}	else {	    if(appendErrMsg) //append text	        errMsgField.text(errMsgField.text()+errMsg).show();  	    else  //reset text	        errMsgField.text(errMsg).show();  	    field.removeClass("select").addClass("error_select");		}}function validateDropDownBox(label, field, errMsgField, appendErrMsg) {      var isValid = true;    var errMsg = "";       var value = field.val();     	if (value == null || value.length == 0) {	   	    //errMsg = label + " is a required value. ";	  	    errMsg = g_dictionary["label.required"]; 		isValid = false;			} 			showErrorInDropdown(isValid, field, errMsgField, errMsg, appendErrMsg);		return isValid;}function validateInteger(label, field, errMsgField, min, max, isOptional) {    return validateNumber(label, field, errMsgField, min, max, isOptional, "integer");    }function validateNumber(label, field, errMsgField, min, max, isOptional, type) {    var isValid = true;    var errMsg = "";    var value = field.val();           	if (value != null && value.length != 0) {		if(isNaN(value)) {			//errMsg = label + " must be a number";			errMsg = g_dictionary["label.invalid.number"]; 			isValid = false;		} 		else {		    if(type == "integer" && (value % 1) != 0) {		        //errMsg = label + " must be an integer";		        errMsg = g_dictionary["label.invalid.integer"]; 				isValid = false;		    }					if (min != null && value < min) {				//errMsg = label + " must be a value greater than or equal to " + min;				errMsg = g_dictionary["label.minimum"] + ": " + min; 				isValid = false;			}			if (max != null && value > max) {				//errMsg = label + " must be a value less than or equal to " + max;				errMsg = g_dictionary["label.maximum"] + ": " + max; 				isValid = false;			}		}	}	else if(isOptional!=true){  //required field		//errMsg = label + " is a required value. ";		errMsg = g_dictionary["label.required"]; 		isValid = false;	}	showError(isValid, field, errMsgField, errMsg);		return isValid;}function validateString(label, field, errMsgField, isOptional, maxLength) {      var isValid = true;    var errMsg = "";    var value = field.val();     	if (isOptional!=true && (value == null || value.length == 0)) {	 //required field   	    //errMsg = label + " is a required value. ";	  	    errMsg = g_dictionary["label.required"];  		isValid = false;			} 		else if (value!=null && value.length >= maxLength) {	    	    //errMsg = label + " must be less than " + maxLength + " characters";	 	    errMsg = g_dictionary["label.maximum"] + ": " + max + " " + g_dictionary["label.character"];   		isValid = false;			} 		else if(value!=null && value.indexOf('"')!=-1) {	    //errMsg = "Double quotes are not allowed";		    errMsg = g_dictionary["label.double.quotes.are.not.allowed"];   		isValid = false;		}	showError(isValid, field, errMsgField, errMsg);		return isValid;}function validateEmail(label, field, errMsgField, isOptional) {      if(validateString(label, field, errMsgField, isOptional) == false)        return;    var isValid = true;    var errMsg = "";    var value = field.val();     		        if(value!=null && value.length>0) {        myregexp = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;           var isMatch = myregexp.test(value);        if(!isMatch) {                        errMsg = g_dictionary["label.example"] + ": xxxxxxx@hotmail.com";	        isValid = false;			    }	}	 		showError(isValid, field, errMsgField, errMsg);		return isValid;}function validateIp(label, field, errMsgField, isOptional) {      if(validateString(label, field, errMsgField, isOptional) == false)        return;    var isValid = true;    var errMsg = "";    var value = field.val();     		        if(value!=null && value.length>0) {        myregexp = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;	           var isMatch = myregexp.test(value);        if(!isMatch) {            //errMsg = label + " should be like 75.52.126.11";	               errMsg = g_dictionary["label.example"] + ": 75.52.126.11";	        isValid = false;			    }	}	 		showError(isValid, field, errMsgField, errMsg);		return isValid;}function validateNetmask(label, field, errMsgField, isOptional) {      if(validateString(label, field, errMsgField, isOptional) == false)        return;    var isValid = true;    var errMsg = "";    var value = field.val();     		        if(value!=null && value.length>0) {        myregexp = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;	           var isMatch = myregexp.test(value);        if(!isMatch) {                        errMsg = g_dictionary["label.example"] + ": 255.255.255.0";	        isValid = false;			    }	}	 		showError(isValid, field, errMsgField, errMsg);		return isValid;}function validateCIDR(label, field, errMsgField, isOptional) {      if(validateString(label, field, errMsgField, isOptional) == false)        return;            var isValid = true;    var errMsg = "";    var value = field.val();         if(value!=null && value.length>0) {        myregexp = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\/\d{1,2}$/;	           var isMatch = myregexp.test(value);        if(!isMatch) {            //errMsg = label + " should be like 10.1.1.0/24";	               errMsg = g_dictionary["label.example"] + ": 10.1.1.0/24";	        isValid = false;			    }	}		showError(isValid, field, errMsgField, errMsg);		return isValid;}function validateCIDRList(label, field, errMsgField, isOptional) {  	    if(validateString(label, field, errMsgField, isOptional) == false)        return;            var isValid = true;    var errMsg = "";    var cidrList = field.val();                var array1 = cidrList.split(",");    for(var i=0; i < array1.length; i++) {        var value = array1[i];           if(value!=null && value.length>0) {            myregexp = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\/\d{1,2}$/;	               var isMatch = myregexp.test(value);            if(!isMatch) {     	        isValid = false;		    	    }    	}	    }           if(isValid == false)    	errMsg = g_dictionary["label.example"] + ": 10.1.1.0/24,10.1.1.1/24,10.1.1.2/24";    	showError(isValid, field, errMsgField, errMsg);		return isValid;}function validatePath(label, field, errMsgField, isOptional) {      if(validateString(label, field, errMsgField, isOptional) == false)        return;    var isValid = true;    var errMsg = "";    var value = field.val();        if(value!=null && value.length>0) {        myregexp = /^\//;	           var isMatch = myregexp.test(value);        if(!isMatch) {            errMsg = label + " should be like /aaa/bbb/ccc";	   	        isValid = false;			    }	}	 		showError(isValid, field, errMsgField, errMsg);		return isValid;}function cleanErrMsg(field, errMsgField) {    showError(true, field, errMsgField);}	*/// FUNCTION: Adds a Dialog to the list of active Dialogs so that// when you shift from one tab to another, we clean out the dialogs/*var activeDialogs = new Array();function activateDialog(dialog, addToActive) {	if (addToActive == undefined || addToActive) {		activeDialogs[activeDialogs.length] = dialog;	}		//bind Enter-Key-pressing event handler to the dialog 		dialog.keypress(function(event) {	    if(event.keyCode == keycode_Enter) {	        	        $('[aria-labelledby$='+dialog.attr("id")+']').find(":button:first").click();		        return false; //event.preventDefault() + event.stopPropagation()	    }    	});}function removeDialogs() {	for (var i = 0; i < activeDialogs.length; i++) {		activeDialogs[i].remove();	}	activeDialogs = new Array();}*/