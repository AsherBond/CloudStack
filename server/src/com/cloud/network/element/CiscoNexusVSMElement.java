// Copyright 2012 Citrix Systems, Inc. Licensed under the
// Apache License, Version 2.0 (the "License"); you may not use this
// file except in compliance with the License.  Citrix Systems, Inc.
// reserves all rights not expressly granted by the License.
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// 
// Automatically generated by addcopyright.py at 04/03/2012
package com.cloud.network.element;

import java.util.List;

import javax.ejb.Local;

import org.apache.log4j.Logger;

import com.cloud.agent.AgentManager;
import com.cloud.api.commands.AddCiscoNexusVSMCmd;
import com.cloud.api.commands.DeleteCiscoNexusVSMCmd;
import com.cloud.api.commands.ListCiscoNexusVSMCmd;
import com.cloud.api.commands.ListCiscoNexusVSMNetworksCmd;
import com.cloud.api.response.CiscoNexusVSMResponse;
import com.cloud.configuration.ConfigurationManager;
import com.cloud.configuration.dao.ConfigurationDao;
import com.cloud.dc.dao.DataCenterDao;
import com.cloud.host.dao.HostDao;
import com.cloud.host.dao.HostDetailsDao;
import com.cloud.network.CiscoNexusVSMDeviceVO;
import com.cloud.network.CiscoNexusVSMDeviceManagerImpl;
import com.cloud.network.NetworkManager;
import com.cloud.network.dao.NetworkDao;
import com.cloud.network.dao.NetworkServiceMapDao;
import com.cloud.network.dao.PhysicalNetworkDao;
import com.cloud.network.resource.CiscoNexusVSMResource;
import com.cloud.resource.ServerResource;
import com.cloud.utils.component.Inject;
import com.cloud.network.PortProfile;

@Local(value = NetworkElement.class)
public class CiscoNexusVSMElement extends CiscoNexusVSMDeviceManagerImpl implements CiscoNexusVSMElementService {

    private static final Logger s_logger = Logger.getLogger(CiscoNexusVSMElement.class);

    @Inject
    NetworkManager _networkManager;
    @Inject
    ConfigurationManager _configMgr;
    @Inject
    NetworkServiceMapDao _ntwkSrvcDao;
    @Inject
    AgentManager _agentMgr;
    @Inject
    NetworkManager _networkMgr;
    @Inject
    HostDao _hostDao;
    @Inject
    DataCenterDao _dcDao;
    @Inject
    HostDetailsDao _hostDetailDao;    
    @Inject
    PhysicalNetworkDao _physicalNetworkDao;
    @Inject
    NetworkDao _networkDao;
    @Inject
    HostDetailsDao _detailsDao;
    @Inject
    ConfigurationDao _configDao;
    
    
    public CiscoNexusVSMDeviceVO addCiscoNexusVSM(AddCiscoNexusVSMCmd cmd) {
    
    	// This function essentially prepares all the parameters we need to send
    	// to the addCiscoNexusVSM() function defined in CiscoNexusVSMDeviceManagerImpl.java.
    	
    	// We have this separation of functionality between CiscoNexusVSMElement.java
    	// to address multiple versions of Cisco Nexus Switches in future. This is the
    	// function/layer that will parse multiple versions and accordingly prepare
    	// different parameters to pass to to the CiscoNexusVSMDeviceManagerImpl functions
    	// which will in turn talk to the right resource via the appropriate manager.

        String vsmipaddress = cmd.getIpAddr();
        String vsmusername = cmd.getUsername();
        String vsmpassword = cmd.getPassword();
        String vsmName = cmd.getVSMName();
        long zoneId = cmd.getZoneId();
        
        // Invoke the addCiscoNexusVSM() function defined in the upper layer (DeviceMgrImpl).
        // The  upper layer function will create a resource of type "host" to represent this VSM.
        // It will add this VSM to the db.
        CiscoNexusVSMDeviceVO vsmDeviceVO = addCiscoNexusVSM(zoneId, vsmipaddress, vsmusername, vsmpassword, (ServerResource) new CiscoNexusVSMResource(), vsmName);
        return vsmDeviceVO;
    }

    public boolean deleteCiscoNexusVSM(DeleteCiscoNexusVSMCmd cmd) {
    	return true;
    }
    

    public List<? extends PortProfile> listNetworks(ListCiscoNexusVSMNetworksCmd cmd) {
    
    	/***
    	// Get the device id of the VSM from the database.
    	Long vsmDeviceId = cmd.getvsmDeviceId();
    	
    	// Get all details of the VSM by firing a dao find (querying the db). 
    	CiscoNexusVSMDeviceVO vsmDeviceVo = _lbDeviceDao.findById(vsmDeviceId);
    	
        List<PortProfileVO> portProfileMap = _networkLBDao.listByLoadBalancerDeviceId(lbDeviceId);
        if (networkLbMaps != null && !networkLbMaps.isEmpty()) {
            for (NetworkExternalLoadBalancerVO networkLbMap : networkLbMaps) {
                NetworkVO network = _networkDao.findById(networkLbMap.getNetworkId());
                networks.add(network);
            }
        }
        
        return networks;
        ***/
    	return null;
    }

    public List<CiscoNexusVSMDeviceVO> listCiscoNexusVSMs(ListCiscoNexusVSMCmd cmd) {
    	return null;
    	
    }

    public CiscoNexusVSMResponse createCiscoNexusVSMResponse(CiscoNexusVSMDeviceVO vsmDeviceVO) {    		
            CiscoNexusVSMResponse response = new CiscoNexusVSMResponse();
            response.setId(vsmDeviceVO.getId());
            response.setMgmtIpAddress(vsmDeviceVO.getMgmtIpAddr());
            return response;
        }

    
    public String getPropertiesFile() {
    	return null;
    }
}